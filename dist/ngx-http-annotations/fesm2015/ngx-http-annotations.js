import { HttpParams, HttpHeaders, HttpClient, HttpClientModule } from '@angular/common/http';
import { NgModule, APP_INITIALIZER } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @param {?} annotations
 * @return {?}
 */
function observe(annotations) {
    return (...args) => HttpRestUtils.decorate.apply(this, ['observe', annotations, ...args]);
}
/**
 * @param {?} annotations
 * @return {?}
 */
function path(annotations) {
    return (...args) => HttpRestUtils.decorate.apply(this, ['path', annotations, ...args]);
}
/**
 * @param {?} annotations
 * @return {?}
 */
function body(annotations) {
    return (...args) => HttpRestUtils.decorate.apply(this, ['body', annotations, ...args]);
}
/**
 * @param {?} annotations
 * @return {?}
 */
function query(annotations) {
    return (...args) => HttpRestUtils.decorate.apply(this, ['query', annotations, ...args]);
}
/**
 * @param {?} annotations
 * @return {?}
 */
function headers(annotations) {
    return (...args) => HttpRestUtils.decorate.apply(this, ['headers', annotations, ...args]);
}
/**
 * @param {?} annotations
 * @return {?}
 */
function produces(annotations) {
    return (...args) => HttpRestUtils.decorate.apply(this, ['produces', annotations, ...args]);
}
const /** @type {?} */ RESOURSE_METADATA_ROOT = 'resources_metadata';
class HttpRestUtils {
    /**
     * @param {?} decoratorName
     * @param {?} annotations
     * @param {...?} args
     * @return {?}
     */
    static decorate(decoratorName, annotations, ...args) {
        switch (args.length) {
            case 1: {
                const [target] = args;
                HttpRestUtils.constructMetadata.apply(this, [decoratorName, 'class', annotations, target.prototype]);
                break;
            }
            case 2: {
                const [target, key] = args;
                HttpRestUtils.constructMetadata.apply(this, [decoratorName, 'props', annotations, target]);
                break;
            }
            case 3:
                if (typeof args[2] === 'number') {
                    const [target, keyName, index] = args;
                    HttpRestUtils.constructMetadata.apply(this, [decoratorName, 'params', annotations, target, { keyName, index }]);
                    break;
                }
                else {
                    const [target, keyName, descriptor] = args;
                    HttpRestUtils.constructMetadata.apply(this, [decoratorName, 'methods', annotations, target, { keyName }]);
                    break;
                }
            default:
                throw new Error('Decorators are not valid here!');
        }
    }
    /**
     * Set up metadada
     * @param {?} metaName Decorator name
     * @param {?} entityType
     * @param {?} value Value of metadata
     * @param {?} target Prototype of current object
     * @param {?=} entityData Entity extra data
     * @return {?}
     */
    static constructMetadata(metaName, entityType, value, target, entityData) {
        target[RESOURSE_METADATA_ROOT] = target[RESOURSE_METADATA_ROOT] || {};
        target[RESOURSE_METADATA_ROOT][entityType] = target[RESOURSE_METADATA_ROOT][entityType] || {};
        const /** @type {?} */ rootMetadata = target[RESOURSE_METADATA_ROOT];
        const /** @type {?} */ metadataObj = target[RESOURSE_METADATA_ROOT][entityType];
        if (entityData && entityData.keyName) {
            metadataObj[entityData.keyName] = metadataObj[entityData.keyName] || {};
        }
        if (entityData && entityData.index != null) {
            metadataObj[entityData.keyName][metaName] = metadataObj[entityData.keyName][metaName] || {};
        }
        switch (entityType) {
            case 'class':
                metadataObj[metaName] = value;
                break;
            case 'props':
                metadataObj[metaName] = value;
                break;
            case 'methods':
                metadataObj[entityData.keyName][metaName] = value;
                break;
            case 'params': metadataObj[entityData.keyName][metaName][value || 'default'] = entityData.index;
        }
        target[RESOURSE_METADATA_ROOT][entityType] = metadataObj;
    }
    /**
     * @param {?} requestMethodName
     * @return {?}
     */
    static requestMethod(requestMethodName) {
        // @dynamic
        return (target, key, descriptor) => {
            descriptor.value = function (...args) {
                const /** @type {?} */ url = HttpRestUtils.collectUrl(target, key, args);
                const /** @type {?} */ body = HttpRestUtils.collectBody(target, key, args);
                const /** @type {?} */ search = HttpRestUtils.collectQueryParams(target, key, args);
                const /** @type {?} */ headers = HttpRestUtils.collectHeaders(target, key, args);
                const /** @type {?} */ producesType = HttpRestUtils.produce(target, key, args);
                const /** @type {?} */ observe = HttpRestUtils.getObserve(target, key, args);
                const /** @type {?} */ params = {
                    body,
                    params: search,
                    headers,
                    responseType: producesType,
                    observe
                };
                return HttpRestUtils.http.request(requestMethodName, url, params);
            };
        };
    }
    /**
     * @param {?} target
     * @param {?} methodName
     * @param {?} args
     * @return {?}
     */
    static getObserve(target, methodName, args) {
        if (target[RESOURSE_METADATA_ROOT].methods
            && target[RESOURSE_METADATA_ROOT].methods[methodName]) {
            return target[RESOURSE_METADATA_ROOT].methods[methodName].observe;
        }
        return undefined;
    }
    /**
     * @param {?} target
     * @param {?} methodName
     * @param {?} args
     * @return {?}
     */
    static produce(target, methodName, args) {
        if (target[RESOURSE_METADATA_ROOT].methods
            && target[RESOURSE_METADATA_ROOT].methods[methodName]) {
            return target[RESOURSE_METADATA_ROOT].methods[methodName].produces;
        }
        return undefined;
    }
    /**
     * @param {?} target
     * @param {?} methodName
     * @param {?} args
     * @return {?}
     */
    static collectUrl(target, methodName, args) {
        const /** @type {?} */ baseUrl = target[RESOURSE_METADATA_ROOT] && target[RESOURSE_METADATA_ROOT].class
            ? target[RESOURSE_METADATA_ROOT].class.path
            : '';
        const /** @type {?} */ methodUrl = target[RESOURSE_METADATA_ROOT].methods && target[RESOURSE_METADATA_ROOT].methods[methodName]
            ? target[RESOURSE_METADATA_ROOT].methods[methodName].path
            : '';
        const /** @type {?} */ isRelativePath = `${baseUrl}${methodUrl}`[0] === '/';
        const /** @type {?} */ methodUrlWithParams = [baseUrl, methodUrl]
            .filter(path => path)
            .join('/')
            .split('/')
            .map(path => {
            if (path[0] === ':') {
                const /** @type {?} */ paramName = path.substring(1);
                const /** @type {?} */ index = target[RESOURSE_METADATA_ROOT].params
                    && target[RESOURSE_METADATA_ROOT].params[methodName]
                    && target[RESOURSE_METADATA_ROOT].params[methodName].path
                    ? target[RESOURSE_METADATA_ROOT].params[methodName].path[paramName]
                    : '';
                return args[index];
            }
            return path;
        })
            .filter(path => path)
            .join('/');
        if (!isRelativePath) {
            const [absolutePrefix, ...paths] = methodUrlWithParams.split('/');
            return `${absolutePrefix}//${paths.join('/')}`;
        }
        return `/${methodUrlWithParams}`;
    }
    /**
     * @param {?} target
     * @param {?} methodName
     * @param {?} args
     * @return {?}
     */
    static collectBody(target, methodName, args) {
        if (!target[RESOURSE_METADATA_ROOT].params
            || !target[RESOURSE_METADATA_ROOT].params[methodName]
            || !target[RESOURSE_METADATA_ROOT].params[methodName].body)
            return undefined;
        const /** @type {?} */ index = target[RESOURSE_METADATA_ROOT].params[methodName].body.default;
        return args[index];
    }
    /**
     * @param {?} target
     * @param {?} methodName
     * @param {?} args
     * @return {?}
     */
    static collectQueryParams(target, methodName, args) {
        if (!target[RESOURSE_METADATA_ROOT].params
            || !target[RESOURSE_METADATA_ROOT].params[methodName]
            || !target[RESOURSE_METADATA_ROOT].params[methodName].query)
            return undefined;
        let /** @type {?} */ queryParams = new HttpParams();
        const /** @type {?} */ queryParamsObjectIndex = target[RESOURSE_METADATA_ROOT].params[methodName].query.default;
        const /** @type {?} */ queryMetadata = target[RESOURSE_METADATA_ROOT].params[methodName].query;
        const /** @type {?} */ queryParamsCollection = queryParamsObjectIndex != undefined
            ? args[queryParamsObjectIndex]
            : Object.keys(queryMetadata).reduce((mergedObj, paramName) => Object.assign(mergedObj, { [paramName]: args[queryMetadata[paramName]] }), {});
        Object.keys(queryParamsCollection)
            .forEach(paramName => {
            let /** @type {?} */ value = queryParamsCollection[paramName];
            if (!Array.isArray(value)) {
                value = [value];
            }
            value.forEach((curParam) => queryParams = queryParams.append(paramName, curParam));
        });
        return queryParams;
    }
    /**
     * @param {?} target
     * @param {?} methodName
     * @param {?} args
     * @return {?}
     */
    static collectHeaders(target, methodName, args) {
        const /** @type {?} */ classHeaders = target[RESOURSE_METADATA_ROOT].class ? target[RESOURSE_METADATA_ROOT].class.headers : {};
        const /** @type {?} */ methodHeaders = target[RESOURSE_METADATA_ROOT].methods && target[RESOURSE_METADATA_ROOT].methods[methodName]
            ? target[RESOURSE_METADATA_ROOT].methods[methodName].headers
            : {};
        const /** @type {?} */ mergedHeaders = Object.assign({}, classHeaders, methodHeaders);
        const /** @type {?} */ httpHeaders = new HttpHeaders();
        for (const /** @type {?} */ header in mergedHeaders) {
            httpHeaders.append(header, mergedHeaders[header]);
        }
        return httpHeaders;
    }
}
HttpRestUtils.http = null;

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class HttpRestModule {
}
HttpRestModule.decorators = [
    { type: NgModule, args: [{
                imports: [HttpClientModule],
                providers: [
                    { provide: APP_INITIALIZER, useFactory: onAppInit, multi: true, deps: [HttpClient] }
                ]
            },] },
];
/**
 * @param {?} http
 * @return {?}
 */
function onAppInit(http) {
    return function () {
        HttpRestUtils.http = http;
    };
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
let /** @type {?} */ Path = path;
let /** @type {?} */ PathParam = path;
let /** @type {?} */ Body = body(null);
let /** @type {?} */ Query = query(null);
let /** @type {?} */ QueryParam = query;
let /** @type {?} */ QueryParams = query(null);
let /** @type {?} */ Observe = observe;
// Headers
let /** @type {?} */ Headers = headers;
// Produces
let /** @type {?} */ Produces = produces;
// Request methods
let /** @type {?} */ GET = HttpRestUtils.requestMethod('Get');
let /** @type {?} */ POST = HttpRestUtils.requestMethod('Post');
let /** @type {?} */ PUT = HttpRestUtils.requestMethod('Put');
let /** @type {?} */ DELETE = HttpRestUtils.requestMethod('Delete');
let /** @type {?} */ OPTIONS = HttpRestUtils.requestMethod('Options');
let /** @type {?} */ HEAD = HttpRestUtils.requestMethod('Head');
let /** @type {?} */ PATCH = HttpRestUtils.requestMethod('Patch');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { Path, PathParam, Body, Query, QueryParam, QueryParams, Observe, Headers, Produces, GET, POST, PUT, DELETE, OPTIONS, HEAD, PATCH, HttpRestModule, onAppInit, observe, path, body, query, headers, produces, HttpRestUtils };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,